---
title: "Wrangling"
number-sections: true
execute: 
  warning: false
fig-env: 'figure'
fig-pos: 'h'
fig-align: center
code-fold: false
---

::: {.callout-caution title="Learning Goals"}
-   Explore the following wrangling verbs: `select`, `mutate`, `filter`, `arrange`, `summarize`, `group_by`
-   Use the native pipe operator `|>`
:::

::: {.callout-note title="Additional Resources"}
For more information about the topics covered in this chapter, refer to the resources below:

-   [Intro to dplyr (YouTube)](https://www.youtube.com/watch?v=dqP0DejI7lw) by Lisa Lendway
-   [Demonstration of dplyr (YouTube)](https://www.youtube.com/watch?v=PgZvq7ZPvEE&feature=youtu.be) by Lisa Lendway
-   [Data Transformation (html)](https://r4ds.hadley.nz/data-transform.html) by Wickham, Ã‡etinkaya-Rundel, & Grolemund
-   [A Grammar for Data Wrangling (html)](https://mdsr-book.github.io/mdsr2e/ch-dataI.html) by Baumer, Kaplan, and Horton
:::


## Motivation

Recall the elections data by U.S. county:

```{r}
# Load tidyverse & data
library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

We've used data viz to explore some general patterns in the election outcomes. For example, a map!

```{r fig.width = 8}
# Get a background map
library(socviz)
data(county_map)

# Make a choropleth map
library(RColorBrewer)  # For the color scale
library(ggthemes) # For theme_map
elections |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = 
           ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips)) |> 
  ggplot(aes(map_id = county_fips, fill = cut(repub_pct_20, breaks = seq(0, 100, by = 10)))) +
    geom_map(map = county_map) +
    scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
    expand_limits(x = county_map$long, y = county_map$lat)  + 
    theme_map() +
    theme(legend.position = "right") + 
    coord_equal()

```

Consider some fairly basic follow-up questions, each of which we cannot answer precisely (or sometimes even at all) using our data viz tools:

-   How many total people voted for the Democratic and Republican candidates in 2020?
-   What about in each state?
-   In just the state of Minnesota:
    -   Which counties had the highest and lowest Democratic vote in 2020?
    -   How did the Democratic vote in each county *change* from 2016 to 2020?


## Goals

We really cannot do anything with data (viz, modeling, etc) *unless* we can wrangle the data. The following is a typical quote. I agree with the 90% -- data wrangling isn't something we have to do before we can do data science, it *is* data science! But let's rethink the 10% -- data wrangling is a fun and empowering puzzle!

![](https://mac-stat.github.io/images/112/david_robinson.png)

The goals of data wrangling are to explore how to:

-   Get data into the tidy shape / format we need for analysis. For example, we might want to:
    -   keep only certain observations
    -   define new variables
    -   reformat or "clean" existing variables
    -   combine various datasets
    -   process "string" or text data
-   Numerically (not just visually) explore and summarize various characteristics of the variables in our dataset.


## Tools

We'll continue to use packages that are part of the `tidyverse` which share a common general grammar and structure.

![](https://mac-stat.github.io/images/112/tidyverse.png)


## Warm-Up

There are lots and lots of steps that can go into data wrangling, thus lots and lots of relevant R functions. BUT just 6 functions can get us very far. People refer to these as the 6 main **wrangling verbs** or functions:

-   why "verbs"? in the `tidyverse` grammar, functions serve as *action words*
-   the 6 verbs are all stored in the `dplyr` package within the `tidyverse`
-   each verb acts on a data frame and returns a data frame


| verb        | action                                            |
|:------------|:--------------------------------------------------|
| `arrange`   | **arrange** the *rows* according to some *column* |
| `filter`    | **filter** out or obtain a subset of the *rows*   |
| `select`    | **select** a subset of *columns*                  |
| `mutate`    | **mutate** or create a *column*                   |
| `summarize` | calculate a numerical **summary** of a *column*   |
| `group_by`  | **group** the *rows* by a specified *column*      |



### Example 1

Which verb would help us...

a.  keep *only* information about state names, county names, and the 2020 and 2016 Democratic support (not the 2012 results, demographics, etc)

Select, we would view the subset of those few columns

b.  get *only* the data on Minnesota

filter

c.  define a new variable which calculates the *change* in Democratic support from 2016 to 2020, using `dem_pct_20` and `dem_pct_16`

mutate (or summarize, although it would be seperate)

d.  sort the counties from highest to lowest Democratic support

arrange

e.  determine the total number of votes cast across all counties

summarize (or mutate, but it would be with everything else)

### Example 2: Select Columns

To get a sense for the code structure, let's explore a couple verbs together. To start, let's simplify our dataset to include only some variables of interest. Specifically, `select()` only the *columns* relevant to state names, county names, and the 2020 and 2016 Democratic support:

```{r eval = FALSE}
# What's the first argument? The second?
#is the point here that its hard to tell? certainly theres sort of sub-arguments
select(elections, c(state_name, county_name, dem_pct_20, dem_pct_16))
```

Let's re-do this with the **pipe function** `|>`:

```{r eval = FALSE}
elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16)
```



::: {.callout-note title="Pipe Function `|>`"}
`|>` "passes" objects, usually datasets, to a function:

`object |> function()` is the same as `function(object)`
:::



### Example 3: Filter Rows

Let's `filter()` out only the *rows* related to Minnesota (MN):

```{r eval = FALSE}
# Without a pipe
filter(elections, state_name == "Minnesota")
```

```{r eval = FALSE}
# With a pipe
elections |> 
  filter(state_name == "Minnesota")
```



::: {.callout-note title="`==` vs `=`"}
We use `a == b` to check whether `a` *matches* `b`.

We use `a = b` to *define* that `a` is equal to `b`. We typically use `=` for this purpose inside a function, and `<-` for this purpose outside a function.

```{r}
# Ex: "=" defines x
x = 2
x
```

```{r}
# Ex: "==" checks whether x is/matches 3
x == 3
```
:::

### Example 4: Filter and Select

Let's *combine* `select()` and `filter()` to create a new dataset with info about the county names, and 2020 and 2016 Democratic support among Minnesota counties.

```{r eval = FALSE}
# Without pipes
filter(select(elections, c(state_name, county_name, dem_pct_20, dem_pct_16)), state_name == "Minnesota")
```

```{r eval = FALSE}
# With pipes: all verbs in 1 row
elections |> select(state_name, county_name, dem_pct_20, dem_pct_16) |> filter(state_name == "Minnesota")
```

```{r eval = FALSE}
# With pipes: each verb in a new row
elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16) |> 
  filter(state_name == "Minnesota")
```

```{r eval = FALSE}
# We can even do this with UN-tidyverse code in "base" R
elections[elections$state_name == "Minnesota", c(1, 4, 8, 12)]
```

::: {.callout-warning title="Reflection"}
Why will we typically use:

-   tidyverse code
-   the pipe function `|>`
-   each verb on a new row
:::



### Example 5: Order of Operations

Sometimes, the order of operations matters, eg, putting on socks then shoes produces a different result than putting on shoes then socks. However, sometimes order doesn't matter, eg, pouring cereal into a bowl then adding milk produces the same result as pouring milk into a bow then adding cereal (though one order is obviously better than the other ;)) Above (also copied below), we `select`ed some columns and then `filter`ed some rows:

```{r eval = FALSE}
elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16) |> 
  filter(state_name == "Minnesota")
```

Would we get the same result if we reversed `select()` and `filter()`? Think first, then try it.

```{r}
# Try it
elections |>
   filter(state_name == "Minnesota") |>
   select(state_name, county_name, dem_pct_20, dem_pct_16)
#its fine, because all columns are maintained with the filter function
```



### Example 6: Storing Results

Typically:

-   We want to store our data wrangling results.
-   It's good practice to do so under a *new* name. We want to preserve, thus don't want to *overwrite*, the original data (especially if our code contains errors!!).

```{r}
# Store the results
mn <- elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16) |> 
  filter(state_name == "Minnesota")

# Always check it out to confirm it's what you want it to be!
head(mn)
nrow(mn)
nrow(elections)
#seems to be right, there are 87 counties in minnesotqa, according to google at least!
```

## Exercises

{{< include activity-instructions.qmd >}}

### Exercise 1: `select` Practice {-}


Use `select()` to create a simplified dataset that we'll use throughout the exercises below.

-   Store this dataset as `elections_small`.
-   Only keep the following variables: `state_name`, `county_name`, `total_votes_20`, `repub_pct_20`, `dem_pct_20`, `total_votes_16`, `dem_pct_16`

```{r}
# Define elections_small
elections_small <- elections |> 
  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16)
#___ <- ___ |>
#  ___(___)
head(elections_small)
# Check out the first 6 rows to confirm your code did what you think it did!

```



### Exercise 2: `filter` Demo {-}

Whereas `select()` selects certain *variables* or columns, `filter()` keeps certain *units of observation* or rows relative to their outcome on certain variables. To this end, we must:

-   Identify the variable(s) that are relevant to the filter.

-   Use a "logical comparison operator" to define which values of the variable to *keep*:

    | symbol             | meaning                   |
    |:-------------------|:--------------------------|
    | `==`               | equal to                  |
    | `!=`               | not equal to              |
    | `>`                | greater than              |
    | `>=`               | greater than or equal to  |
    | `<`                | less than                 |
    | `<=`               | less than or equal to     |
    | `%in% c(???, ???)` | a list of multiple values |

-   Use quotes `""` when specifying outcomes of interest for a categorical variable.



::: {.callout-tip title="Commenting/Uncommenting Code"}

To comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd+shift+c</kbd>.

:::



```{r}
# Keep only data on counties in Hawaii
# Confused me, cuz i think hawaii has 5 counties
elections_small |>
 filter(state_name == "Hawaii")
```
```{r}
# so i checked
hi <- elections_small |>
 filter(state_name == "Hawaii")
nrow(hi)
#and it only has 4 here, yeah!
#apparently, its cuz kawalao county is partially governmentally subjugated to maui county cuz it only has 81 people
```

```{r}
# What does this do?
#it should filter for datapoints where state_name == either Hawaii or Delaware
elections_small |> 
  filter(state_name %in% c("Hawaii", "Delaware"))
```

```{r}
# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020
# THINK: What variable is relevant here?
elections_small |>
     filter(repub_pct_20>93.97)

```

```{r}
# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020
# This should have 1 more row (observation) than your answer above
elections_small |>
     filter(repub_pct_20>=93.97)

```

We can also filter with respect to 2 rules! Here, think what variables are relevant.

```{r}
# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020
# Do this 2 ways.
# Method 1: 2 filters with 1 condition each
elections_small |> 
  filter(state_name== "Texas") |> 
  filter(dem_pct_20>65)

# Method 2: 1 filter with 2 conditions
elections_small |> 
  filter(state_name=="Texas", dem_pct_20>65)
```



### Exercise 3: `arrange` Demo {-}


`arrange()` arranges or sorts the *rows* in a dataset according to a given column or variable, in ascending or descending order:

`arrange(variable)`, `arrange(desc(variable))`

```{r}
# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support
# Print out just the first 6 rows
 elections_small |> 
  arrange(repub_pct_20) |> 
   head()
```

```{r}
# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |> 
  arrange(desc(repub_pct_20)) |>
   head()
```



### Exercise 4: `mutate` Demo {-}


`mutate()` can either transform / mutate an existing variable (column), or define a new variable based on existing ones.

#### Part a {-}

```{r}
# What did this code do?
 elections_small |> 
   mutate(diff_20 = repub_pct_20 - dem_pct_20) |> 
   head()
#added a column representing the percent difference between dem and repub in a given county
```

```{r}
# What did this code do?
elections_small |> 
   mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |> 
   head()
#added a column that represented the total number of repub votes in a county in 2020
```

```{r}
# What did this code do?
 elections_small |> 
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
   head()
#added a column that shows the boolean value of if republicans won a certain county in 2020
```

#### Part b {-}

```{r}
# You try
# Define a variable that calculates the change in Dem support in 2020 vs 2016
elections_small |> 
  mutate("dem_cng_16-20" = (dem_pct_20 - dem_pct_16)) |> 
 head()
```

```{r}
# You try
# Define a variable that determines whether the Dem support was higher in 2020 than in 2016 (TRUE/FALSE)
elections_small |> 
  mutate("dem_up_16-20" = (dem_pct_20 > dem_pct_16)) |> 
  head()
```



### Exercise 5: Pipe Series {-}

Let's now combine these verbs into a pipe series!

#### Part a {-}

::: {.callout-important title="Think then Run"}

BEFORE running the below chunk, what do you think it will produce?
It will display the counties won by the dems in 2020, arranged from most to least votes total
:::

```{r}
 elections_small |> 
   filter(state_name == "Wisconsin",
          repub_pct_20 < dem_pct_20) |> 
   arrange(desc(total_votes_20)) |> 
   head()
```

#### Part b {-}

::: {.callout-important title="Think then Run"}

BEFORE trying, what do you think will happen if you change the order of filter and arrange:

-   the results will be the same
In this case, I think they will be the same, because they change two different things about the data: the order, and what is included
-   we'll get an error
-   we won't get an error, but the results will be different

:::

```{r}
# Now try it. Change the order of filter and arrange below.
 elections_small |> 
arrange(desc(total_votes_20)) |> 
  filter(state_name == "Wisconsin",
          repub_pct_20 < dem_pct_20) |> 
   
   head()
```

#### Part c {-}

So the order of `filter()` and `arrange()` did *not* matter -- rerranging them produces the same results. BUT what is one *advantage* of filtering before arranging?
It culls unneccesary data to lighten up the arranging process(?)

#### Part d {-}

::: {.callout-important title="Think then Run"}

BEFORE running the below chunk, what do you think it will produce?
The data of counties in Delaware, with only columns for county name, 2020 percents, and a new boolean that shows if the repubs won the county
:::

```{r}
 elections_small |> 
   filter(state_name == "Delaware") |> 
   mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
   select(county_name, repub_pct_20, dem_pct_20, repub_win_20)
```

#### Part e {-}

::: {.callout-important title="Think then Run"}

BEFORE trying, what do you think will happen if you change the order of mutate and select:

1.   the results will be the same
2.   we'll get an error
It ought to throw up an error, since the select refers to a variable that doesn't exist yet
3.   we won't get an error, but the results will be different

:::

```{r}
# Now try it. Change the order of mutate and select below.
elections_small |> 
   filter(state_name == "Delaware") |> 
  select(county_name, repub_pct_20, dem_pct_20, repub_win_20) |>
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) 
 #just as i thought, it threw up this exact error  
```



### Exercise 6: DIY Pipe Series {-}

We've now learned 4 of the 6 wrangling verbs: `select`, `filter`, `mutate`, `arrange.` Let's practice combining these into pipe series. Here are some hot tips:

-   Before writing any code, translate the prompt: how many distinct wrangling steps are needed and what verb do we need in each step?
-   Add each verb one at a time -- don't try writing a whole chunk at once.

#### Part a {-}

Show just the counties in Minnesota and their Democratic 2020 vote percentage, from highest to lowest. Your answer should have just 2 columns.

```{r}
elections_small |>
  filter(state_name == "Minnesota") |>
  select(county_name, dem_pct_20) |>
  arrange(desc(dem_pct_20))
```

#### Part b {-}

Create a new dataset named `mn_wi` that sorts the counties in Minnesota and Wisconsin from lowest to highest in terms of the *change* in Democratic vote percentage in 2020 vs 2016. This dataset should include the following variables (and only these variables): `state_name`, `county_name`, `dem_pct_20`, `dem_pct_16`, and a variable measuring the change in Democratic vote percentage in 2020 vs 2016.

```{r}
# Define the dataset
mn_wi<- elections_small|>
  filter(state_name %in% c("Minnesota", "Wisconsin")) |>
  mutate ("dem_chng_16_20" = dem_pct_20-dem_pct_16) |>
  select(state_name, county_name, dem_pct_20, dem_pct_16, dem_chng_16_20) |>
  arrange(dem_chng_16_20)
# Only store the results once you're confident that they're correct


# Check out the first 6 rows to confirm your results
head(mn_wi)
```

#### Part c {-}

Construct and discuss a plot of the county-level change in Democratic vote percent in 2020 vs 2016, and how this differs between Minnesota and Wisconsin.

In Minnesota, the most common change in vote percentage was somewhere around 2.6% percent more Democratic from 2016 to 2020 in a given county. However, it there is also somewhat of a positive skew which means there was a significant number of counties with 7.5 to 5 percent increases in democratic vote percentage. In Wisconsin, on the other hand, the mode rested somewhere much closer to a 1% increases, and there was a significant number of counties where democratic vote percentage decreased, usually by something like .75%. there remains a positive skew, but it doesn't plateau as much as minnesorta, and there are many wisconsin counties with more than a 3.5% increase in democratic vote percentage
```{r}
ggplot(mn_wi, aes(x=dem_chng_16_20)) +
  geom_histogram(color="white", fill="magenta2", binwidth=.4) +
  facet_wrap(~ state_name)
```



### Exercise 7: `summarize` Demo {-}

6 verbs: `select`, `filter`, `arrange`, `mutate`, `summarize`, `group_by`

Let's talk about the last 2 verbs. `summarize()` (or equivalently `summarise()`) takes an entire data frame as input and outputs a single row with one or more summary statistics. For each chunk below, indicate what the code does.

```{r}
# What does this do?
# It finds the median value between all counties of the repub voting pct
 elections_small |> 
   summarize(median(repub_pct_20))
```

```{r}
# What does this do?
# The same thing as above, but renames the variable median_repub
 elections_small |> 
   summarize(median_repub = median(repub_pct_20))
```

```{r}
# What does this do?
#In addition to this median variable, creates another new varriable that is the sum of all votes in the country in 2020
 elections_small |> 
   summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
```



### Exercise 8: `summarize` + `group_by` demo {-}


Finally, `group_by()` groups the units of observation or rows of a data frame by a specified set of variables. Alone, this function doesn't change the appearance of our dataset or seem to do anything at all:

```{r}
 elections_small |> 
  group_by(state_name)
```

Though it does change the underlying structure of the dataset:

```{r}
# Check out the structure before and after group_by
 elections_small |> 
   class()
# 
 elections_small |> 
  group_by(state_name) |> 
   class()
```

Where it really shines is in partnership with `summarize()`.

```{r}
# What does this do?
#essentially, it organizes the data for each state together, and so functions like summarize operate within each group
# (What if we didn't use group_by?)
 elections_small |> 
   group_by(state_name) |> 
   summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20)) 
```

::: {.callout-warning title="Reflect"}

Notice that `group_by()` with `summarize()` produces new data frame or tibble! But the units of observation are now states instead of counties within states.

:::



### Exercise 9: DIY {-}

Let's practice (some of) our 6 verbs: `select`, `filter`, `arrange`, `mutate`, `summarize`, `group_by` Remember:

-   Before writing any code, translate the given prompts: how many distinct wrangling steps are needed and what verb do we need in each step?
-   Add each verb one at a time.

#### Part a {-}

NOTE: Part a is a challenge exercise. If you get really stuck, move on to Part b which is the same overall question, but with hints.

```{r}
# Sort the *states* from the most to least total votes cast in 2020
# First we need to group_by, to make summarize operate on a state level. then,  we will use summarize to find total votes cast in each state. Then, we arrange to sort from least to most
elections_small|>
  group_by(state_name) |>
  summarize(total_votes = sum(total_votes_20)) |>
  arrange(total_votes)

```

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?
#Again, we first group_by, then! we summarize to total_votes_repub and total_votes_dem by multiplying the sum of total votes by each percent as a decimal
#elections_small|>
#  group_by(state_name)|>
#  summarize(total_votes_repub = (sum(total_votes_20)*(repub_pct_20 / 100)),total_votes_dem = (sum(total_votes_20)*(dem_pct_20 / 100)) )
#Ack, I see the problem here. the percents for 2020 are by county.
#i guess i ought to just median each pct? we ought to round it too
#elections_small|>
#  group_by(state_name)|>
#  summarize(
#    total_votes_repub = 
#      round (sum(total_votes_20)*(mean(repub_pct_20) / 100)),
#    total_votes_dem = 
#      round(sum(total_votes_20)*(mean(dem_pct_20) / 100)))
#ok so checking the solution the answer which i avoided, which was to find them by state first, was in fact correct, and even when i corrected the median to a mean, it was still innaccurate (but closeish!), cuz counties dont all have the same number of voters. also the piping sucks on old one
elections_small|>
  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
  group_by(state_name) |> 
  summarize(total_votes_dem = sum(dem_votes_20),
            total_votes_repub = sum(repub_votes_20))
```

```{r}
# What states did the Democratic candidate win in 2020?
#I tried thinking of a different way, but im pretty sure we can only do it by starting with basically all the same code from last time, then just using a > operator to define a "dem_win" variable. the only difference is we don't neccesarily need to summarize, just mutate, cuz we would summarize at the end. in fact, we can just put this part inside, and this is preferable, as mutate changes the dataclass unfavorably. We can now just filter by dem_win==true
elections_small|>
  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
  group_by(state_name) |> 
  summarize(dem_win = (sum(dem_votes_20) > sum(repub_votes_20)))|>
  filter(dem_win == "TRUE")
  
```

#### Part b {-}

```{r}
# Sort the states from the most to least total votes cast in 2020
# HINT: Calculate the total number of votes in each state, then sort

```

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each state?
# HINT: First calculate the number of Dem and Repub votes in each *county*
# Then group and summarize these by state

```

```{r}
# What states did the Democratic candidate win in 2020?
# HINT: Start with the results from the previous chunk, and then keep only some rows

```



### Exercise 10: Practice on New Data {-}

Recall the World Cup football/soccer data from TidyTuesday:

```{r}
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")
head(world_cup)
str(world_cup)
```

You can find a codebook [here](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-11-29). Use (some of) our 6 verbs (`select`, `filter`, `arrange`, `mutate`, `summarize`, `group_by`) and data viz to address the following prompts.

```{r}
# In what years did Brazil win the World Cup?
world_cup |>
  filter(winner=="Brazil")
```

```{r}
# What were the 6 World Cups with the highest attendance?
world_cup |>
  arrange(desc(attendance)) |>
  head()
```

```{r}
# Construct a univariate plot of goals_scored (no wrangling necessary)
# This provides a visual summary of how the number of goals_scored varies from World Cup to World Cup
ggplot(world_cup, aes(x=goals_scored)) +
  geom_histogram(color="cadetblue2",fill="plum2")

```

```{r}
# Let's follow up the plot with some more precise numerical summaries
# Calculate the min, median, and max number of goals_scored across all World Cups
# NOTE: Visually compare these numerical summaries to what you observed in the plot
world_cup|>
  summarize(
    min(goals_scored), median(goals_scored), max(goals_scored))
ggplot(world_cup, aes(y=goals_scored)) +
  geom_boxplot()

```

```{r}
# Construct a bivariate plot of how the number of goals_scored in the World Cup has changed over the years
# No wrangling necessary
ggplot(world_cup, aes(y=goals_scored,x=year)) +
  geom_point(shape=4, color="firebrick1", size=2.5) +
  geom_smooth(alpha=0.1)
```

```{r}
# Our above summaries might be a bit misleading.
# The number of games played at the World Cup varies.
# Construct a bivariate plot of how the typical number of goals per game has changed over the years
world_cup |>
  mutate(goals_per = goals_scored/games) |>
ggplot( aes(y=goals_per, x=year)) +
  geom_point(shape=4, color="firebrick1", size=2.5) +
  geom_smooth(alpha=0.1)

```



### Exercise 11: Practice on Your Data {-}

Return to the TidyTuesday data you're using in Homework 3. Use your new wrangling skills to play around. What new insights can you gain?!


## Solutions

<details>

<summary>Click for Solutions</summary>

### Example 1

a.  select
b.  filter
c.  mutate
d.  arrange
e.  summarize



### Exercise 1: `select` Practice {-}

```{r}
# Define elections_small
elections_small <- elections |>
  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16)

# Check out the first 6 rows to confirm your code did what you think it did!
head(elections_small)

```



### Exercise 2: `filter` Demo {-}

```{r}
# Keep only data on counties in Hawaii
elections_small |>
 filter(state_name == "Hawaii")
```

```{r}
# Keep counties in Hawaii AND Delaware
elections_small |> 
  filter(state_name %in% c("Hawaii", "Delaware"))
```

```{r}
# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020
elections_small |> 
  filter(repub_pct_20 > 93.97)
```

```{r}
# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020
# This should have 1 more row than your answer above
elections_small |> 
  filter(repub_pct_20 >= 93.97)
```

```{r}
# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020
# Do this 2 ways.
# Method 1: 2 filters with 1 condition each
elections_small |>
 filter(state_name == "Texas") |>
 filter(dem_pct_20 > 65)

# Method 2: 1 filter with 2 conditions
elections_small |>
 filter(state_name == "Texas", dem_pct_20 > 65)
```



### Exercise 3: `arrange` Demo {-}

```{r}
# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |>
  arrange(repub_pct_20) |>
  head()
```

```{r}
# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |>
  arrange(desc(repub_pct_20)) |>
  head()
```



### Exercise 4: `mutate` Demo {-}

```{r}
# Define diff_20, the difference btwn the Repub and Dem percent in 2020
elections_small |> 
  mutate(diff_20 = repub_pct_20 - dem_pct_20) |> 
  head()
```

```{r}
# Define repub_votes_20, the number (not percent) of Repub votes in 2020
elections_small |> 
  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |> 
  head()
```

```{r}
# Define repub_win_20, whether the Repub won in 2020 (TRUE or FALSE!)
elections_small |> 
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
  head()
```



### Exercise 5: Pipe Series {-}

#### Part c {-}

It's more "computationally efficient" to get rid of some rows before arranging.

#### Part e {-}

We can't select a variable before we define it!



### Exercise 6: DIY Pipe Series {-}

#### Part a {-}

Here's my translation:

-   just the counties in Minnesota ---\> filter
-   just the counties in Minnesota and their Democratic 2020 vote percentage ---\> select
-   from highest to lowest ---\> arrange

```{r}
# Remember to try this 1 line at a time
elections_small |> 
  filter(state_name == "Minnesota") |> 
  select(county_name, dem_pct_20) |> 
  arrange(desc(dem_pct_20))

```

#### Part b {-}

Here's my translation:

-   counties in Minnesota and Wisconsin ---\> filter
-   change in Democratic vote percentage in 2020 vs 2016 ---\> mutate (we don't already have this)
-   sorts the counties from highest to lowest ---\> arrange
-   include the following variables (and only these variables) ---\> select

```{r}
# Remember to try this 1 line at a time before storing!
mn_wi <- elections_small |> 
  filter(state_name %in% c("Minnesota", "Wisconsin")) |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16) |>
  mutate(dem_change = dem_pct_20 - dem_pct_16) |> 
  arrange(dem_change)
  
# Check it out
head(mn_wi)
```

#### Part c {-}

There was a stronger Dem shift from 2016 to 2020 in Minnesota. Further, in most counties across both states, the percent Dem tended to be higher in 2020 than in 2016.

```{r}
ggplot(mn_wi, aes(x = dem_change, fill = state_name)) + 
  geom_density(alpha = 0.5)
ggplot(mn_wi, aes(y = dem_change, x = state_name)) + 
  geom_boxplot()
```



### Exercise 7: `summarize` Demo {-}

```{r}
# Calculate the median Repub vote percentage in 2020 across all counties
elections_small |> 
  summarize(median(repub_pct_20))
```

```{r}
# Calculate the median Repub vote percentage in 2020 across all counties
# AND name it "median_repub"
elections_small |> 
  summarize(median_repub = median(repub_pct_20))
```

```{r}
# Calculate the median Repub vote percentage in 2020 across all counties
# AND the total number of votes across all counties
# AND name the results
elections_small |> 
  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
```


### Exercise 8: `summarize` + `group_by` demo {-}

```{r}
# Calculate the median 2020 Repub percent and total votes BY STATE
elections_small |> 
  group_by(state_name) |> 
  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20)) 
```



### Exercise 9: DIY {-}

#### Part a {-}

```{r}
# Sort the states from the most to least total votes in 2020
elections_small |> 
  group_by(state_name) |> 
  summarize(total = sum(total_votes_20)) |> 
  arrange(desc(total))
```

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?
elections_small |> 
  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
  group_by(state_name) |> 
  summarize(dem_total = sum(dem_votes_20),
            repub_total = sum(repub_votes_20))
```

```{r}
# What states did the Democratic candidate win in 2020?
elections_small |> 
  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), 
         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |> 
  group_by(state_name) |> 
  summarize(dem_total = sum(dem_votes_20),
            repub_total = sum(repub_votes_20)) |> 
  filter(dem_total > repub_total)
```



### Exercise 10: Practice on New Data {-}

```{r}
# In what years did Brazil win the World Cup?
world_cup |> 
  filter(winner == "Brazil")
```

```{r}
# What were the 6 World Cups with the highest attendance?
world_cup |> 
  arrange(desc(attendance)) |> 
  head()
```

```{r}
# Construct a univariate plot of goals_scored (no wrangling necessary)
# This provides a visual summary of how the number of goals_scored varies from World Cup to World Cup
ggplot(world_cup, aes(x = goals_scored)) + 
  geom_histogram(color = "white")
```

```{r}
# Let's follow up the plot with some more precise numerical summaries
# Calculate the min, median, and max number of goals_scored across all World Cups
# NOTE: Visually compare these numerical summaries to what you observed in the plot
world_cup |> 
  summarize(min(goals_scored), median(goals_scored), max(goals_scored))
```

```{r}
# Construct a bivariate plot of how the number of goals_scored in the World Cup has changed over the years
# No wrangling necessary
ggplot(world_cup, aes(x = year, y = goals_scored)) + 
  geom_point() + 
  geom_line()
```

```{r}
# Our above summaries might be a bit misleading.
# The number of games played at the World Cup varies.
# Construct a bivariate plot of how the typical number of goals per game has changed over the years
per_game_data <- world_cup |> 
  mutate(goals_per_game = goals_scored / games)

ggplot(per_game_data, aes(x = year, y = goals_per_game)) + 
  geom_point() + 
  geom_line()
```

</details>
